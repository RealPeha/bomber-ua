const { Telegraf, session, Extra } = require('telegraf')
const { Keyboard } = require('telegram-keyboard')
const dedent = require('dedent')

const Call = require('../bomber/call')
const SMS = require('../bomber/sms')

const callServices = require('../bomber/services/call')
const smsServices = require('../bomber/services/sms')

const bot = new Telegraf(process.env.BOT_TOKEN)

bot.use(session())

const MAX_ACTIVE = 50
let active = 0

const spamTypeKeyboard = Keyboard.reply(['‚úâÔ∏è –°–ú–°', '‚òéÔ∏è –ó–≤–æ–Ω–∫–∏'], {}, Extra.HTML())

const start = ctx => {
    ctx.session.bomber = null
    ctx.session.bomberType = ''
    ctx.session.number = ''

    return ctx.reply(dedent`
        –ü—Ä–∏–≤–µ—Ç üë®‚Äçüíª

        ‚òéÔ∏è <b>–°–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤:</b> <code>${callServices.length}</code>
        ‚úâÔ∏è <b>–°–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å–º—Å:</b> <code>${smsServices.length}</code>

        –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–µ–±–µ —Ç–∏–ø –∞—Ç–∞–∫–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å
    `, spamTypeKeyboard)
}

bot.start(start)

bot.hears('‚úâÔ∏è –°–ú–°', Telegraf.reply('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...'))
bot.hears('‚òéÔ∏è –ó–≤–æ–Ω–∫–∏', async (ctx) => {
    ctx.session.bomberType = 'Call'

    return ctx.reply('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∂–µ—Ä—Ç–≤—ã (—Å +38 –≤ –Ω–∞—á–∞–ª–µ)', Keyboard.remove())
})
bot.hears('–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å', async (ctx, next) => {
    if (ctx.session.bomber) {
        ctx.session.bomber.stop(true)
        active -= 1

        await ctx.reply('–ü—Ä–µ–∫—Ä–∞—â–µ–Ω–æ')
    }

    return next()
}, start)

bot.hears('–ù–∞—á–∞—Ç—å –∞—Ç–∞–∫—É', async (ctx) => {
    if (ctx.session.bomber && !ctx.session.bomber.isRunning) {
        if ((active + 1) > MAX_ACTIVE) {
            return ctx.reply('–ë–æ–º–±–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∑–∂–µ')
        }

        active += 1
        await ctx.reply('–†–∞—Å—Å—ã–ª–∞—é –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∑–≤–æ–Ω–∫–∏...', Keyboard.reply('–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å'))

        ctx.session.bomber.start(callServices)
            .on('send', ({ result, site }) => {
                ctx.telegram.sendMessage(ctx.chat.id, `[${ctx.session.bomber.success + 1}/${ctx.session.bomber.count}] –£—Å–ø–µ—à–Ω–æ: <code>${site.baseUrl || site.url}</code>`, Extra.webPreview(false).HTML())
                    .catch(() => 42)
            })
            .on('error', ({ err, site }) => {
                ctx.telegram.sendMessage(ctx.chat.id, `[${ctx.session.bomber.success}/${ctx.session.bomber.count}] –ù–µ —É–¥–∞–ª–æ—Å—å: <code>${site.baseUrl || site.url}\n${JSON.stringify(err, null, 2)}</code>`, Extra.webPreview(false).HTML())
                    .catch(() => 42)
            })
            .on('finish', () => {
                ctx.telegram.sendMessage(ctx.chat.id, dedent`
                    –ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞

                    <b>–£—Å–ø–µ—à–Ω–æ:</b> ${ctx.session.bomber.success} / ${ctx.session.bomber.count} 
                `, Keyboard.reply('–û—Ç–ª–∏—á–Ω–æ', {}, Extra.HTML())).catch(() => 42)

                active -= 1
                ctx.session.bomber = null
                ctx.session.bomberType = null
            })
    }
})

bot.hears(['–û—Ç–º–µ–Ω–∞', '–û—Ç–ª–∏—á–Ω–æ'], start)

bot.command('/pause', ctx => {
    if (ctx.session.bomber) {
        ctx.session.bomber.pause()
        active -= 1

        return ctx.reply('–ë–æ–º–±–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢—ã –º–æ–∂–µ—à—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /resume')
    }
})

bot.command('/resume', ctx => {
    if (ctx.session.bomber) {
        ctx.session.bomber.resume()
        active += 1

        return ctx.reply('–ü—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...')
    }
})

bot.on('text', ctx => {
    if (ctx.session.bomber) {
        return
    }

    if (!ctx.session.bomberType) {
        return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –∞—Ç–∞–∫–∏', spamTypeKeyboard)
    }

    const text = ctx.message.text.trim()

    if (ctx.session.number) {
        if (ctx.session.bomberType === 'Call') {
            ctx.session.bomber = new Call(ctx.session.number, text || null, {
                // limit: 3,
            })    
        }
    
        if (ctx.session.bomberType === 'SMS') {
            ctx.session.bomber = new SMS(ctx.session.number, text || null, {
                // limit: 3,
            })   
        }

        return ctx.reply('–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?', Keyboard.reply(['–ù–∞—á–∞—Ç—å –∞—Ç–∞–∫—É', '–û—Ç–º–µ–Ω–∞']))
    }

    const number = text

    if (!number.startsWith('+380')) {
        return ctx.reply('–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>+380</code>', Extra.HTML())
    }

    if (number.length !== 13) {
        return ctx.reply('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –Ω–æ–º–µ—Ä–æ–º')
    }

    ctx.session.number = number

    return ctx.reply('üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è –∂–µ—Ä—Ç–≤—ã')
})

module.exports = bot
