const { Telegraf, session, Extra } = require('telegraf')
const { Keyboard } = require('telegram-keyboard')
const dedent = require('dedent')

const Call = require('../bomber/call')
const SMS = require('../bomber/sms')

const callServices = require('../bomber/services/call')
const smsServices = require('../bomber/services/sms')

const BOMBERS = {
    CALL: 'Call',
    SMS: 'SMS',
}

const bot = new Telegraf(process.env.BOT_TOKEN)

const html = Extra.HTML()
const noop = () => 42
const spamTypeKeyboard = Keyboard.reply(['‚úâÔ∏è –°–ú–°', '‚òéÔ∏è –ó–≤–æ–Ω–∫–∏'], {}, html)

const start = ctx => {
    return ctx.reply(dedent`
        –ü—Ä–∏–≤–µ—Ç üë®‚Äçüíª

        ‚òéÔ∏è <b>–°–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤:</b> <code>${callServices.length}</code>
        ‚úâÔ∏è <b>–°–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å–º—Å:</b> <code>${smsServices.length}</code>

        –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–µ–±–µ —Ç–∏–ø –∞—Ç–∞–∫–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å
    `, spamTypeKeyboard)
}

bot.use(session())

bot.start(start)

bot.hears('‚úâÔ∏è –°–ú–°', (ctx) => {
    if (ctx.session.bomber && ctx.session.bomber.isRunning) {
        return ctx.reply('–ë–æ–º–±–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω', Keyboard.reply('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'))
    }

    ctx.session.bomberType = BOMBERS.SMS

    return ctx.reply('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∂–µ—Ä—Ç–≤—ã (–Ω–∞—á–∏–Ω–∞—è —Å <code>+38</code>)', {...Keyboard.remove(), parse_mode: 'HTML'})
})

bot.hears('‚òéÔ∏è –ó–≤–æ–Ω–∫–∏', (ctx) => {
    if (ctx.session.bomber && ctx.session.bomber.isRunning) {
        return ctx.reply('–ë–æ–º–±–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω', Keyboard.reply('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'))
    }

    ctx.session.bomberType = BOMBERS.CALL

    return ctx.reply('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∂–µ—Ä—Ç–≤—ã (–Ω–∞—á–∏–Ω–∞—è —Å <code>+38</code>)', {...Keyboard.remove(), parse_mode: 'HTML'})
})

bot.hears('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', async (ctx, next) => {
    if (ctx.session.bomber) {
        ctx.session.bomber.stop()

        await ctx.reply('–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    }

    ctx.session = {}

    return next()
}, start)

bot.hears('–ù–∞—á–∞—Ç—å –∞—Ç–∞–∫—É', async ({ session, chat, telegram, reply}) => {
    if (session.bomber && !session.bomber.isRunning) {
        await reply('–ù–∞—á–∏–Ω–∞—é –∞—Ç–∞–∫–æ–≤–∞—Ç—å...', Keyboard.reply('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'))

        session.bomber.start()
            .on('task_finish', (taskId, { result, site }) => {
                telegram.sendMessage(
                    chat.id,
                    `[${session.bomber.success} / ${session.bomber.amount}] –£—Å–ø–µ—à–Ω–æ: <code>${site.baseUrl || site.url}</code>`,
                    html
                ).catch(noop)
            })
            .on('task_failed', (taskId, { err, site }) => {
                telegram.sendMessage(
                    chat.id,
                    `[${session.bomber.success} / ${session.bomber.amount}] –ù–µ —É–¥–∞–ª–æ—Å—å: <code>${site.baseUrl || site.url}\n${JSON.stringify(err, null, 2)}</code>`,
                    html
                ).catch(noop)
            })
            .on('drain', () => {
                telegram.sendMessage(
                    chat.id,
                    dedent`
                        –ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞

                        <b>–£—Å–ø–µ—à–Ω–æ:</b> ${session.bomber.success} / ${session.bomber.amount} 
                    `,
                    Keyboard.reply('–û—Ç–ª–∏—á–Ω–æ', {}, html)
                ).catch(noop)
            })
    }
})

bot.hears(['–û—Ç–º–µ–Ω–∞', '–û—Ç–ª–∏—á–Ω–æ'], Telegraf.tap(ctx => ctx.session = {}), start)

bot.on('text', ({ session, message, reply }) => {
    if (session.bomber) {
        return
    }

    if (!session.bomberType) {
        return reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –∞—Ç–∞–∫–∏', spamTypeKeyboard)
    }

    let text = message.text.trim()

    if (!session.number) {
        text = text.replace(/[\s-()]/g, '')

        if (!text.startsWith('+380')) {
            return reply('–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>+380</code>', html)
        }
    
        if (text.length !== 13) {
            return reply('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –Ω–æ–º–µ—Ä–æ–º')
        }
    }

    switch (session.bomberType) {
        case BOMBERS.CALL: {
            if (session.number) {
                session.bomber = new Call({
                    number: session.number,
                    name: text || '',
                })
            } else {
                session.number = text

                return reply('üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è –∂–µ—Ä—Ç–≤—ã')
            }

            break
        }
        case BOMBERS.SMS: {
            session.bomber = new SMS({ number: text })
        }
    }

    return reply('–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?', Keyboard.reply(['–ù–∞—á–∞—Ç—å –∞—Ç–∞–∫—É', '–û—Ç–º–µ–Ω–∞']))
})

module.exports = bot
